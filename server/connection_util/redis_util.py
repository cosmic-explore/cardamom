import json
from uuid import UUID
from classes.player import Player
from classes.creature import Creature
from classes.match import Match
from classes.board import Board
from classes.command import Command

def match_from_json(json_str):
    """Takes a JSON representation of the dict generated by Match.to_simple_dict()
    and initializes a full Match."""
    def init_creature(creature_dict, board):
        creature = Creature(
            creature_dict["species_id"],
            creature_dict["player_id"],
            creature_dict["level"],
            creature_dict["nickname"],
            id=creature_dict["id"]
        )
        if creature_dict["position"] is not None:
            creature.set_position(
                board[
                    creature_dict["position"]["x"]
                ]
                [
                    creature_dict["position"]["y"]
                ]
            )
        return creature
    
    def init_player(player_dict, board):
        if player_dict is None:
            return None
        player = Player(player_dict["name"])
        player.creatures = [init_creature(c, board) for c in player_dict["creatures"]]
        return player
    
    simple_dict = json.loads(json_str)
    board = Board(simple_dict["board"]["size_x"], simple_dict["board"]["size_y"])
    player_1 = init_player(simple_dict["player_1"], board)
    player_2 = init_player(simple_dict["player_2"], board)
    return Match(
        board,
        player_1,
        player_2,
        simple_dict["turn_number"],
        simple_dict["active"]
    )

def commands_from_json(json_str, match):
    def get_creature_from_match(match, creature_id):
        for player in [match.player_1, match.player_2]:
            for creature in player.creatures:
                if str(creature.id) == creature_id:
                    return creature
        raise Exception(f"Creature {creature_id} does not exist in match {match.id}.")

    def get_action_from_creature(creature, action_id):
        for action in creature.actions:
            if str(action.id) == action_id:
                return action
        raise Exception(f"Creature {creature.id} does not have action {action_id}.")
    
    simple_dict = json.loads(json_str)
    creature = get_creature_from_match(match, simple_dict["creature_id"])
    action = creature.actions[0] # this is a placeholder for testing. Will call get_action_from_creature(creature, simple_dict["action_id"])
    move_target = None if simple_dict["move_target"] is None else match.board[simple_dict["move_target"]["x"]][simple_dict["move_target"]["y"]]
    action_target = None if simple_dict["action_target"] is None else match.board[simple_dict["action_target"]["x"]][simple_dict["action_target"]["y"]]
    return Command(
        creature,
        move_target,
        action,
        action_target
    )