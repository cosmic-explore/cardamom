import logging
logging.basicConfig(level=logging.DEBUG)

import os
import json
import redis
from classes.player import Player
from classes.creature import Creature, CreatureState
from classes.match import Match
from classes.board import Board
from classes.command import Command

def get_redis_connection():
    # call this to use a new redis connection with each request so that they are not shared across workers
    host = os.environ.get("REDIS_HOST")
    return redis.Redis(host=host, port=6379, db=0, decode_responses=True)

def match_from_json(json_str):
    """Takes a JSON representation of the dict generated by Match.to_simple_dict()
    and initializes a full Match."""    
    def init_player(player_dict):
        if player_dict is None:
            return None
        player = Player(player_dict["name"], id=player_dict["id"])
        player.creatures = [Creature.from_dict(c) for c in player_dict["creatures"]]
        return player
    
    simple_dict = json.loads(json_str)
    player_1 = init_player(simple_dict["player_1"])
    player_2 = init_player(simple_dict["player_2"])
    match = Match(
        player_1,
        player_2,
        simple_dict["turn_number"],
        simple_dict["active"],
        id=simple_dict["id"]
    )
    match.board = Board(simple_dict["board"]["size_x"], simple_dict["board"]["size_y"], match=match, id=simple_dict["board"]["id"])
    match.history = simple_dict["history"]
    match.creature_states = [CreatureState.from_dict(cs, match=match) for cs in simple_dict["creature_states"]]
    return match

def commands_from_json_and_match(json_str, match):
    """Loads commands stored in redis"""
    command_dict_array = json.loads(json_str)
    return [Command.from_dict_and_match(c, match) for c in command_dict_array]

def game_notification(notification_type, data):
    return json.dumps({"notification_type": notification_type, "data": data})
